package groupingBy;

import java.util.LinkedHashMap;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.stream.Collectors;

public class MaxFrequencyChar {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		  String str = "Hello";	
		  char ch = str.chars()
		            .mapToObj(x -> (char) x)                  // box to Character
		            .collect(Collectors.groupingBy(x -> x, Collectors.counting()))  // collect to Map<Character, Long>
		            .entrySet().stream()
		            .max(Entry.<Character, Long>comparingByValue())                  // find entry with largest count
		            .get()                                    // or throw if source string is empty
		            .getKey();
		  
		  System.out.println(ch);
		  
		  String s1 = "DDDDDivya";
		  char ch2 = s1.chars().mapToObj(x -> (char) x)
				  .collect(Collectors.groupingBy( x -> x, Collectors.counting()))
				  .entrySet()
				  .stream()
				  .max(Entry.<Character, Long>comparingByValue())
				  .get()
				  .getKey();
		  
		  System.out.println(ch2);
		  
		  String s2 = "DDDDDivyabbffggaaaaaaaaaaaazzzxxxxbbcccccccccfffffffffgggggggghhhhhhhhhhhiiiiiiiiikkkkkkkkkmmmmmmmmeeeeeeyyyyyyywwwwwwwwwpppppppppqqqqqnnnnnnnnnnnsssttttttt";
		  final int[] rank = {0};
		  System.out.println(s2.chars().mapToObj(s -> (char) s)
		  			.collect(Collectors.groupingBy(s -> Collectors.counting(), TreeMap::new, s -> s))
		  			.entrySet()
		  			.stream()
		  			//.sorted(Entry.<Character, Long>comparingByValue())
		  			.peek(System.out::println)
		  			.filter(e -> ++rank[0] == 10)
		  			.collect(Collectors.toList())
		  			.get(0)
		  			.getKey());
		  			
		  			
		  
		  
	}

}
