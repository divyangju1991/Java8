package stream;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

public class CustomSortingMap {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Person p1 = new Person(1, 21, "Pooja", "pooja@outlook.com");
		Person p2 = new Person(1, 31, "Komal", "komal@outlook.com");
		Person p3 = new Person(1, 41, "Divyang", "divyang@outlook.com");
		Person p4 = new Person(1, 11, "Krutarth", "krutarth@outlook.com");
		
		Map<Person, Integer> map = new TreeMap(Comparator.comparing(Person::getEmail));
		map.put(p1, p1.getId());
		map.put(p2, p2.getId());
		map.put(p3, p3.getId());
		map.put(p4, p4.getId());
		
		System.out.println(map);
		
		System.out.println("map.get => "+map.get(p1));
		
		Map<Person, Integer> map2 = new HashMap();
		map2.put(p1, p1.getAge());
		map2.put(p2, p2.getAge());
		map2.put(p3, p3.getAge());
		map2.put(p4, p4.getAge());
		System.out.println(map2);
		
		Map<Person, Integer> map3 = map2.entrySet()
									    .stream()
									    .sorted(Entry.<Person, Integer>comparingByValue())
									    .collect(Collectors.toMap(Entry::getKey, Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));
		System.out.println("map3 : " +map3);
		
		List<Person> persons = new ArrayList<>();
		persons.add(p1);
		persons.add(p2);
		persons.add(p3);
		persons.add(p4);
		
		List<Person> persons2 = persons.stream().sorted(Comparator.comparing(Person::getAge)).collect(Collectors.toList());
		System.out.println(persons2);
		
		Set<String> mySet = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());
	}

}
